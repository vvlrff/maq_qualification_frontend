version: "3.9"

services:
  db:
    image: postgres:15
    env_file:
      - .env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - my-network

  pgadmin:
    image: dpage/pgadmin4:latest
    env_file:
      - .env.prod
    ports:
      - "8080:80"
    depends_on:
      - db
    networks:
      - my-network

  alembic:
    build:
      context: .
      dockerfile: alembic/Dockerfile
    env_file:
      - .env.prod
    depends_on:
      - db
    command: alembic upgrade head
    networks:
      - my-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    environment:
      - "discovery.type=single-node"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - my-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.2
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - my-network

  filebeat:
    build:
      context: ./filebeat
    volumes:
      - ./logs:/logs
      - ./frontend/nginx/logs:/var/log/nginx
    networks:
      - my-network
    depends_on:
      - logstash

  logstash:
    build:
      context: ./logstash
      dockerfile: Dockerfile
    environment:
      XPACK_MONITORING_ENABLED: "false"
    expose:
      - 5044
    ports:
      - 5044:5044
    volumes:
      - ./logstash/pipelines/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./logstash/pipelines:/usr/share/logstash/config/pipelines:ro
    depends_on:
      - elasticsearch
    networks:
      - my-network

  rabbitmq:
    image: rabbitmq:3.11-management
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - my-network

  parser:
    build:
      context: .
      dockerfile: parser/Dockerfile
    env_file:
      - .env.prod
    depends_on:
      - rabbitmq
      - db
      - elasticsearch
      - redis
      - logstash
    volumes:
      - ./logs:/logs
    command: python3 /app/parser/collect.py
    networks:
      - my-network

  redis:
    image: redis:7
    expose:
      - 6379
    volumes:
      - redis_data:/data
    networks:
      - my-network

  celery:
    build:
      context: .
      dockerfile: parser/Dockerfile
    env_file:
      - .env.prod
    command: celery --app=app.parser.tasks:app worker -l INFO
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - celery_data:/app/celery
    depends_on:
      - redis
    networks:
      - my-network

  flower:
    build:
      context: .
      dockerfile: parser/Dockerfile
    env_file:
      - .env.prod
    command: celery --app=app.parser.tasks:app flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - celery_data:/app/celery
    depends_on:
      - redis
      - celery
    ports:
      - 5555:5555
    networks:
      - my-network

  processor:
    build:
      context: .
      dockerfile: processor/Dockerfile
    env_file:
      - .env.prod
    depends_on:
      - rabbitmq
      - db
      - elasticsearch
      - logstash
    volumes:
      - ./logs:/logs
    command: python3 /app/processor/processor.py
    networks:
      - my-network

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    expose:
      - 8000
    env_file:
      - .env.prod
    volumes:
      - ./logs:/logs
    depends_on:
      - db
      - elasticsearch
    command: uvicorn app.backend.main:app --host 0.0.0.0 --port 8000 --log-config app/backend/logging.yaml
    networks:
      - my-network

  backend-nginx:
    image: nginx:stable-alpine
    volumes:
      - ./backend/nginx/conf.d:/etc/nginx/conf.d
      - /etc/letsencrypt/live/api.aicrisismap.ru/fullchain.pem:/etc/nginx/ssl/certificate.crt
      - /etc/letsencrypt/live/api.aicrisismap.ru/privkey.pem:/etc/nginx/ssl/certificate.key
    ports:
      - "8443:443"
    networks:
      - my-network

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - backend
    networks:
      - my-network

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=youradminpassword
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - my-network
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/nginx/logs:/var/log/nginx
      - /etc/letsencrypt/:/etc/letsencrypt/
    networks:
      - my-network



volumes:
  postgres_data:
  pgadmin_data:
  pgadmin_sessions:
  elasticsearch-data:
  grafana_data:
  celery_data:
  redis_data:



networks:
  my-network:
    driver: bridge



  # nginx:
  #   build:
  #     context: .
  #     dockerfile: nginx/Dockerfile
  #   ports:
  #     - "80:80"
  #   networks:
  #     - my-network